<!-- app/views/pages/home.html.erb -->
<div class="bg-light min-vh-100 py-5">
  <div class="container">
    <div class="text-center mb-5">
      <h1 class="display-4 fw-bold">Find Workouts</h1>
      <p class="lead text-muted">
        Discover and explore workout routines created by our community
      </p>
    </div>

    <div class="row g-4">
      <% @workouts.each do |workout| %>
        <div class="col-md-4">
          <div class="card h-100 shadow-sm">
            <div class="card-body d-flex flex-column">
              <h5 class="card-title"><%= workout.workout_name %></h5>
              <p class="card-text"><%= truncate(workout.description, length: 100) %></p>

              <% if workout.blocks.present? %>
                <% blocks = workout.blocks.is_a?(String) ? JSON.parse(workout.blocks) : workout.blocks %>
                <% total_blocks    = blocks.size %>
                <% total_exercises = blocks.sum { |b| (b["exercises"] || []).size } %>
                <small class="text-muted mb-3">
                  <%= "#{total_blocks} block#{'s' unless total_blocks == 1} Â· #{total_exercises} exercise#{'s' unless total_exercises == 1}" %>
                </small>
              <% end %>

              <div class="mt-auto">
                <button
                  class="btn btn-outline-primary view-workout-btn"
                  data-bs-toggle="modal"
                  data-bs-target="#workoutModal"
                  data-workout="<%= URI.encode_www_form_component(workout.to_json) %>">
                  View Workout
                </button>
              </div>
            </div>
          </div>
        </div>
      <% end %>

      <% if @workouts.empty? %>
        <div class="col-12 text-center">
          <p class="text-muted">
            No workouts found. <a href="#">Create the first one!</a>
          </p>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- Workout Details Modal -->
<div class="modal fade" id="workoutModal" tabindex="-1" aria-labelledby="workoutModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="workoutModalLabel">Workout Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>

      <div class="modal-body" id="workoutDetails">
        <!-- injected by JS -->
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <button type="button" id="saveWorkoutBtn" class="btn btn-primary">
          Save Workout
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Keep track of initialized elements
  const initialized = new Set();

  document.addEventListener('turbo:load', () => {
    const modalEl = document.getElementById('workoutModal');
    if (!modalEl || initialized.has(modalEl)) return;
    
    // Mark as initialized
    initialized.add(modalEl);

    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    let isLoggedIn = false;
    let workoutModal;

    // Initialize Bootstrap modal
    try {
      workoutModal = new bootstrap.Modal(modalEl, {
        keyboard: true,
        backdrop: true
      });

      // Clean up modal on hide
      modalEl.addEventListener('hidden.bs.modal', () => {
        document.body.classList.remove('modal-open');
        const backdrop = document.querySelector('.modal-backdrop');
        if (backdrop) backdrop.remove();
      });
    } catch (error) {
      console.error('Failed to initialize modal:', error);
      return;
    }

    // Check authentication status
    fetch('/api/authenticated', {
      credentials: 'same-origin',
      headers: { 'Accept': 'application/json' }
    })
      .then(r => r.json())
      .then(data => {
        isLoggedIn = !!data.username;
        console.log('Auth status:', isLoggedIn ? 'Logged in' : 'Not logged in');
      })
      .catch(console.error);

    // Show workout details
    function showWorkoutDetails(raw) {
      if (!raw) {
        console.error('No workout data provided');
        return;
      }

      let workout;
      try {
        // Handle URI encoded data
        raw = decodeURIComponent(raw.replace(/\+/g, ' '));
        workout = JSON.parse(raw);
        console.log('Parsed workout:', workout);
      } catch (err) {
        console.error('Failed to parse workout JSON:', err);
        return;
      }

      // Update modal title
      document.getElementById('workoutModalLabel').textContent = 
        workout.workout_name || 'Workout Details';

      // Update save button
      const saveBtn = document.getElementById('saveWorkoutBtn');
      if (saveBtn) {
        saveBtn.dataset.workoutId = workout.id;
      }

      // Parse and render blocks
      let blocks = [];
      try {
        if (workout.blocks) {
          blocks = Array.isArray(workout.blocks) 
            ? workout.blocks 
            : JSON.parse(workout.blocks);
        }
      } catch (err) {
        console.error('Failed to parse blocks:', err);
        blocks = [];
      }

      // Generate HTML
      const html = `
        <div class="workout-blocks">
          ${blocks.length === 0 
            ? '<p class="text-muted">No exercises in this workout.</p>'
            : blocks.map((blk, idx) => `
                <div class="block mb-4">
                  <h4 class="mb-3">Block ${idx + 1}: ${blk.name || 'Untitled'}</h4>
                  <div class="table-responsive">
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Exercise</th>
                          <th>Sets</th>
                          <th>Reps</th>
                          <th>Weight</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${(blk.exercises || []).map(ex => `
                          <tr>
                            <td>${ex.name || '-'}</td>
                            <td>${ex.sets || '-'}</td>
                            <td>${ex.reps || '-'}</td>
                            <td>${ex.weight || '-'}</td>
                          </tr>
                        `).join('')}
                      </tbody>
                    </table>
                  </div>
                </div>
              `).join('')
          }
        </div>
      `;

      document.getElementById('workoutDetails').innerHTML = html;
      workoutModal.show();
    }

    // Attach view workout handlers
    document.querySelectorAll('.view-workout-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        showWorkoutDetails(btn.dataset.workout);
      });
    });

    // Handle save workout - use once: true to ensure single binding
    document.getElementById('saveWorkoutBtn')?.addEventListener('click', function() {
      if (!isLoggedIn) {
        alert('You must be logged in to save a workout.');
        return;
      }

      // Disable button to prevent multiple clicks
      this.disabled = true;

      const workoutId = this.dataset.workoutId;
      if (!workoutId) {
        alert('Could not determine which workout to save.');
        this.disabled = false;
        return;
      }

      fetch('/api/saved_workouts', {
        method: 'POST',
        credentials: 'same-origin',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({ workout_id: workoutId })
      })
        .then(r => r.ok ? r.json() : r.json().then(e => Promise.reject(e)))
        .then(data => {
          alert('Workout saved successfully!');
          workoutModal.hide();
        })
        .catch(err => {
          console.error('Save error:', err);
          alert(err.error || 'Could not save workout.');
        })
        .finally(() => {
          // Re-enable button after request completes
          this.disabled = false;
        });
    }, { once: true }); // Add once: true option

    // Clean up handler
    modalEl.addEventListener('turbo:before-cache', () => {
      initialized.delete(modalEl);
    });
  });
</script>
